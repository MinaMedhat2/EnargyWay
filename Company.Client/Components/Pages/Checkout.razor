@page "/checkout/{ProductId:int}"
@layout CheckoutLayout
@rendermode @(new InteractiveServerRenderMode(prerender: false))

@using System.Net.Http.Json
@using Company.Client.Models
@using System.Text.Json
@using System.Net
@inject IHttpClientFactory HttpClientFactory
@inject NavigationManager NavigationManager
@inject AuthService AuthService
@inject OrderStateService OrderState

<!-- Back Button -->
<div class="container mt-4">
    <button class="btn btn-outline-light" @onclick='() => NavigationManager.NavigateTo("/products")'>
        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-arrow-left-circle" viewBox="0 0 16 16"><path fill-rule="evenodd" d="M1 8a7 7 0 1 0 14 0A7 7 0 0 0 1 8zm15 0A8 8 0 1 1 0 8a8 8 0 0 1 16 0zm-4.5-.5a.5.5 0 0 1 0 1H5.707l2.147 2.146a.5.5 0 0 1-.708.708l-3-3a.5.5 0 0 1 0-.708l3-3a.5.5 0 1 1 .708.708L5.707 7.5H11.5z" /></svg>
        Back to Products
    </button>
</div>
<PageTitle>Checkout | EnergyWay</PageTitle>
@if (product is null && string.IsNullOrEmpty(errorMessage))
{
    <div class="container mt-5 text-center"><div class="spinner-border text-light" role="status"><span class="visually-hidden">Loading...</span></div><p class="mt-2 text-light">Loading Product Details...</p></div>
}
else if (!string.IsNullOrEmpty(errorMessage))
{

    <div class="container mt-5"><div class="glass-card text-center"><h3 class="text-danger">An Error Occurred</h3><p class="fs-5">@errorMessage</p><button class="btn btn-outline-light mt-3" @onclick='() => NavigationManager.NavigateTo("/")'>Go to Homepage</button></div></div>
}
else
{
    <div class="container mt-5">
        <div class="row g-5">
            <div class="col-md-7 col-lg-8">
                <div class="glass-card">
                    <h4 class="mb-4">Shipping Information</h4>
                    <EditForm Model="shippingModel" OnValidSubmit="ProceedToPayment" FormName="checkoutForm">
                        <DataAnnotationsValidator />
                        <div class="row g-3">
                            <div class="col-12"><label for="fullName" class="form-label">Full Name</label><InputText id="fullName" class="form-control" @bind-Value="shippingModel.FullName" /><ValidationMessage For="@(() => shippingModel.FullName)" /></div>
                            <div class="col-12"><label for="email" class="form-label">Email</label><InputText id="email" class="form-control" @bind-Value="shippingModel.Email" /><ValidationMessage For="@(() => shippingModel.Email)" /></div>
                            <div class="col-12"><label for="phone" class="form-label">Phone Number</label><InputText id="phone" class="form-control" @bind-Value="shippingModel.PhoneNumber" /><ValidationMessage For="@(() => shippingModel.PhoneNumber)" /></div>
                            <div class="col-12"><label for="address" class="form-label">Shipping Address</label><InputTextArea id="address" class="form-control" @bind-Value="shippingModel.ShippingAddress" rows="3" /><ValidationMessage For="@(() => shippingModel.ShippingAddress)" /></div>
                            <div class="col-sm-6">
                                <label for="quantity" class="form-label">Quantity</label><InputNumber id="quantity" class="form-control" @bind-Value="shippingModel.Quantity" /><ValidationMessage For="@(() => shippingModel.Quantity)" />
                                @if (shippingModel.Quantity > shippingModel.MaxAvailableStock)
                                {
                                    <div class="text-warning mt-1" style="font-size: 0.875em;">Only @shippingModel.MaxAvailableStock items are available.</div>
                                }
                            </div>
                        </div>
                        <hr class="my-4" style="border-color: rgba(255,255,255,0.3);" />
                        <button class="w-100 btn btn-primary btn-lg" type="submit" disabled="@(shippingModel.Quantity > shippingModel.MaxAvailableStock)">Continue to Payment</button>
                    </EditForm>
                </div>
            </div>
            <div class="col-md-5 col-lg-4">
                <div class="glass-card">
                    <h4 class="mb-4">Order Summary</h4>
                    <div class="card" style="background: transparent; border: none;">
                        <div class="card-header"><h5 class="my-0">@product.Name</h5></div>
                        <div class="card-body p-0 pt-3">
                            <div class="text-center mb-3"><img src="@GetImage(product)" class="img-fluid rounded" alt="@product.Name" style="max-height: 200px; object-fit: contain;"></div>
                            <ul class="list-group list-group-flush">
                                <li class="list-group-item">Price per item<span>$@product.Price.ToString("0.00")</span></li>
                                <li class="list-group-item">Quantity<span>@shippingModel.Quantity</span></li>
                                <li class="list-group-item fs-5"><strong>Total</strong><strong>$@TotalCost.ToString("0.00")</strong></li>
                            </ul>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

@code {
    [Parameter]
    public int ProductId { get; set; }

    private Product? product;
    // --- START: THIS IS THE FIX ---
    // We are now using the new, correct model for this page.
    private ShippingInfoModel shippingModel = new();
    // --- END: THIS IS THE FIX ---
    private string? errorMessage;

    private string apiBaseUrl = "https://localhost:7185";

    private decimal TotalCost => product is null ? 0 : product.Price * shippingModel.Quantity;

    protected override async Task OnInitializedAsync()
    {
        // --- START: NEW ADDITION ---
        // If we are coming back from the payment page, we should load the saved data.
        if (OrderState.ShippingInfo != null)
        {
            shippingModel = OrderState.ShippingInfo;
        }
        // --- END: NEW ADDITION ---

        try
        {
            var client = HttpClientFactory.CreateClient("WebAPI");
            product = await client.GetFromJsonAsync<Product>($"api/products/{ProductId}");

            if (product != null)
            {
                shippingModel.MaxAvailableStock = product.StockQuantity;
                if (product.StockQuantity <= 0)
                {
                    errorMessage = "This product is out of stock and cannot be ordered.";
                }
            }
            else
            {
                errorMessage = "The requested product could not be found.";
            }

            if (AuthService.IsLoggedIn && AuthService.CurrentUser != null && OrderState.ShippingInfo is null)
            {
                shippingModel.FullName = AuthService.CurrentUser.Username;
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred: {ex.Message}";
        }
    }

    private void ProceedToPayment()
    {
        // --- START: MODIFIED METHOD ---
        // Instead of using URL parameters, we now store the data in OrderStateService
        OrderState.SetShippingInfo(shippingModel);
        NavigationManager.NavigateTo($"/payment/{ProductId}");
        // --- END: MODIFIED METHOD ---
    }

    private string GetImage(Product p)
    {
        if (!string.IsNullOrWhiteSpace(p.ImagePath))
        {
            if (p.ImagePath.StartsWith("http")) return p.ImagePath;
            return $"{apiBaseUrl}/{p.ImagePath.TrimStart('/')}";
        }
        return $"https://via.placeholder.com/400x300.png?text={Uri.EscapeDataString(p.Name)}";
    }
}

