@page "/my-orders/{OrderId:int}"
@layout CheckoutLayout
@rendermode @(new InteractiveServerRenderMode(prerender: false))

@using System.Net.Http.Json
@using Company.Client.Models
@inject IHttpClientFactory HttpClientFactory
@inject NavigationManager NavigationManager

<PageTitle>Order #@OrderId | EnergyWay</PageTitle>

<div class="order-details-background">
    <div class="overlay">
        <div class="container py-5">

            <!-- Back Button -->
            <div class="mb-4">
                <button class="btn btn-outline-light" @onclick='() => NavigationManager.NavigateTo("/my-orders")'>
                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" viewBox="0 0 16 16"><path fill-rule="evenodd" d="M1 8a7 7 0 1 0 14 0A7 7 0 0 0 1 8zm15 0A8 8 0 1 1 0 8a8 8 0 0 1 16 0zm-4.5-.5a.5.5 0 0 1 0 1H5.707l2.147 2.146a.5.5 0 0 1-.708.708l-3-3a.5.5 0 0 1 0-.708l3-3a.5.5 0 1 1 .708.708L5.707 7.5H11.5z" /></svg>
                    Back to My Orders
                </button>
            </div>

            @if (isLoading)
            {
                <div class="text-center p-5">
                    <div class="spinner-border text-primary" role="status"></div>
                    <p class="mt-3 text-light">Loading Order Details...</p>
                </div>
            }
            else if (order is not null)
            {
                <div class="glass-card-details">
                    <!-- Header -->
                    <div class="details-header">
                        <h3>Order #@order.OrderId</h3>
                        <div class="order-status @GetStatusClass(order.OrderStatus)">@order.OrderStatus</div>
                    </div>

                    <div class="row g-4 mt-2">
                        <!-- Left Column: Items -->
                        <div class="col-lg-8">
                            <h5 class="section-title">Items in this Order</h5>
                            @foreach (var item in order.OrderItems)
                            {
                                <div class="item-card">
                                    <img src="@GetProductImage(item)" alt="@item.Product?.Name" class="item-image" />
                                    <div class="item-info">
                                        <div class="item-name">@item.Product?.Name</div>
                                        <div class="item-price-qty">
                                            <span>$@item.UnitPrice.ToString("0.00") x @item.Quantity</span>
                                        </div>
                                    </div>
                                    <div class="item-total">$@((item.UnitPrice * item.Quantity).ToString("0.00"))</div>
                                </div>
                            }
                        </div>

                        <!-- Right Column: Summary & Shipping -->
                        <div class="col-lg-4">
                            <div class="summary-box">
                                <h5 class="section-title">Order Summary</h5>
                                <ul class="summary-list">
                                    <li><span>Subtotal</span> <span>$@order.TotalAmount.ToString("0.00")</span></li>
                                    <li><span>Shipping</span> <span class="text-success">FREE</span></li>
                                    <li class="total"><span>Total</span> <span>$@order.TotalAmount.ToString("0.00")</span></li>
                                </ul>
                            </div>
                            <div class="summary-box mt-4">
                                <h5 class="section-title">Shipping Address</h5>
                                <p class="shipping-address">
                                    <strong>@order.CustomerName</strong>

                                    @order.ShippingAddress

                                    @order.CustomerEmail

                                    @order.CustomerPhone
                                </p>
                            </div>
                        </div>
                    </div>
                </div>
            }
            else
            {
                <div class="glass-card-opaque text-center p-5 mx-auto">
                    <h3 class="text-danger">Order Not Found</h3>
                    <p class="text-white-50">The requested order could not be found.</p>
                </div>
            }
        </div>
    </div>
</div>

<style>
    .order-details-background {
        background: url('/images/back.jpeg') no-repeat center center / cover;
        min-height: 100vh;
        position: relative;
    }

    .overlay {
        background: rgba(0,0,0,0.25);
        backdrop-filter: blur(10px) saturate(120%);
        -webkit-backdrop-filter: blur(10px) saturate(120%);
        min-height: 100vh;
        width: 100%;
    }

    .glass-card-details {
        background: rgba(255,255,255,0.08);
        border: 1px solid rgba(255,255,255,0.18);
        border-radius: 18px;
        padding: 2rem;
        color: #fff;
    }

    .details-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        border-bottom: 1px solid rgba(255,255,255,0.1);
        padding-bottom: 1rem;
    }

    .section-title {
        font-weight: 600;
        margin-bottom: 1rem;
    }

    .item-card {
        display: flex;
        align-items: center;
        gap: 1rem;
        background: rgba(255,255,255,0.05);
        padding: 1rem;
        border-radius: 12px;
        margin-bottom: 1rem;
    }

    .item-image {
        width: 70px;
        height: 70px;
        object-fit: contain;
        border-radius: 8px;
        background: rgba(255,255,255,0.1);
    }

    .item-info {
        flex-grow: 1;
    }

    .item-name {
        font-weight: 600;
    }

    .item-price-qty {
        font-size: 0.9rem;
        color: rgba(255,255,255,0.7);
    }

    .item-total {
        font-weight: bold;
        font-size: 1.1rem;
    }

    .summary-box {
        background: rgba(255,255,255,0.05);
        padding: 1.5rem;
        border-radius: 12px;
    }

    .summary-list {
        list-style: none;
        padding: 0;
        margin: 0;
    }

        .summary-list li {
            display: flex;
            justify-content: space-between;
            margin-bottom: 0.75rem;
        }

            .summary-list li.total {
                font-size: 1.2rem;
                font-weight: bold;
                border-top: 1px solid rgba(255,255,255,0.1);
                padding-top: 1rem;
                margin-top: 0.5rem;
            }

    .shipping-address {
        font-size: 0.95rem;
        line-height: 1.6;
        color: rgba(255,255,255,0.8);
    }

    .order-status {
        font-size: 0.8rem;
        font-weight: 600;
        padding: 0.25rem 0.6rem;
        border-radius: 99px;
        text-transform: uppercase;
    }

    .status-pending {
        background-color: #ffc107;
        color: #333;
    }

    .status-shipped {
        background-color: #0dcaf0;
        color: #000;
    }

    .status-delivered {
        background-color: #198754;
        color: #fff;
    }

    .status-cancelled {
        background-color: #dc3545;
        color: #fff;
    }

    .status-default {
        background-color: #6c757d;
        color: #fff;
    }
</style>

@code {
    [Parameter]
    public int OrderId { get; set; }

    // We will use the 'Order' model from the API project, as it contains all the needed details.
    private Order? order;
    private bool isLoading = true;
    private string apiBaseUrl = "https://localhost:7185";

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var client = HttpClientFactory.CreateClient("WebAPI");
            // We use the endpoint that gets a single order by its ID.
            // This endpoint should return the full order details including items and product info.
            order = await client.GetFromJsonAsync<Order>($"api/orders/{OrderId}");
        }
        catch (Exception)
        {
            // Handle error (e.g., order not found, API down)
            order = null;
        }
        finally
        {
            isLoading = false;
        }
    }

    private string GetProductImage(OrderItem item)
    {
        if (item.Product != null && !string.IsNullOrWhiteSpace(item.Product.ImagePath))
        {
            var imagePath = item.Product.ImagePath;
            if (imagePath.StartsWith("http")) return imagePath;
            return $"{apiBaseUrl}/{imagePath.TrimStart('/')}";
        }
        return $"https://via.placeholder.com/150x150.png?text={Uri.EscapeDataString(item.Product?.Name ?? "Product")}";
    }

    private string GetStatusClass(string? status)
    {
        return status?.ToLower() switch
        {
            "pending" => "status-pending",
            "shipped" => "status-shipped",
            "delivered" => "status-delivered",
            "cancelled" => "status-cancelled",
            _ => "status-default"
        };
    }
}
