@page "/login"
@layout CheckoutLayout
@rendermode @(new InteractiveServerRenderMode(prerender: false))

@using Company.Client.Models
@using System.Net.Http.Json
@using System.Text.Json
@inject IHttpClientFactory HttpClientFactory
@inject NavigationManager NavigationManager
@inject AuthService AuthService

<PageTitle>Login | EnergyWay</PageTitle>

<style>
    /* CSS is correct and doesn't need changes */
    .checkout-page-background {
        background-image: url('images/back.jpeg');
        background-position: center;
        background-repeat: no-repeat;
        background-size: cover;
        background-attachment: fixed;
        min-height: 100vh;
        font-family: 'Poppins', sans-serif;
    }

    .login-container {
        height: 100vh;
        display: flex;
        justify-content: center;
        align-items: center;
        padding: 1rem;
    }

    .login-box {
        width: 100%;
        max-width: 400px;
        padding: 2.5rem;
        background: rgba(255, 255, 255, 0.1);
        backdrop-filter: blur(10px);
        border-radius: 15px;
        border: 1px solid rgba(255, 255, 255, 0.2);
        color: white;
        text-align: center;
    }

        .login-box h3 {
            margin-bottom: 2rem;
            font-weight: 300;
            font-size: 2.25rem;
            letter-spacing: 0.5px;
            text-shadow: 0 1px 3px rgba(0, 0, 0, 0.15);
        }

    .form-group label {
        display: none;
    }

    .form-control {
        background: rgba(0, 0, 0, 0.3);
        border: 1px solid rgba(255, 255, 255, 0.2);
        color: white;
        border-radius: 8px;
        padding: 0.85rem 1.1rem;
        font-size: 1rem;
        margin-bottom: 0.75rem;
    }

        .form-control::placeholder {
            color: rgba(255, 255, 255, 0.7);
        }

        .form-control:focus {
            background: rgba(0, 0, 0, 0.5);
            color: white;
            border-color: #0d6efd;
            box-shadow: 0 0 0 0.25rem rgba(13, 110, 253, 0.25);
        }

    .btn-primary {
        width: 100%;
        padding: 0.85rem;
        font-weight: 500;
        font-size: 1rem;
        border-radius: 8px;
        text-transform: none;
        letter-spacing: 0;
    }

    .btn-link {
        color: rgba(255, 255, 255, 0.8);
        text-decoration: none;
        font-size: 0.9rem;
    }

        .btn-link:hover {
            color: white;
        }

    .alert-danger {
        background-color: rgba(220, 53, 69, 0.8);
        border: none;
        color: white;
    }

    .validation-message {
        color: #ffc4c4;
        font-weight: 500;
        display: block;
        text-align: left;
        margin-top: 0.25rem;
        padding-left: 0.5rem;
    }
</style>

<div class="login-container">
    <div class="login-box">
        <h3>Welcome Back</h3>
        <EditForm Model="loginRequest" OnValidSubmit="HandleLogin" FormName="loginForm">
            <DataAnnotationsValidator />
            <div class="form-group">
                <InputText id="email" class="form-control" @bind-Value="loginRequest.Email" placeholder="Email address" />
                <ValidationMessage For="@(() => loginRequest.Email)" />
            </div>
            <div class="form-group">
                <InputText id="password" type="password" class="form-control" @bind-Value="loginRequest.Password" placeholder="Password" />
                <ValidationMessage For="@(() => loginRequest.Password)" />
            </div>
            @if (!string.IsNullOrWhiteSpace(errorMessage))
            {
                <div class="alert alert-danger mt-3">@errorMessage</div>
            }
            <button type="submit" class="btn btn-primary mt-4" disabled="@isProcessing">
                @if (isProcessing)
                {
                    <span class="spinner-border spinner-border-sm"></span>
                }
                else
                {

                    <span>Login</span>
                }
            </button>
            <div class="mt-3">
                <button type="button" class="btn btn-link" @onclick="GoToRegister">Create a new account</button>
            </div>
        </EditForm>
    </div>
</div>

@code {
    // --- THIS IS THE ONLY CHANGE ---
    // We are now using LoginDto to match the backend API
    private LoginDto loginRequest = new();
    // -----------------------------

    private string? errorMessage;
    private bool isProcessing = false;

    [SupplyParameterFromQuery]
    public string? ReturnUrl { get; set; }

    private async Task HandleLogin()
    {
        isProcessing = true;
        errorMessage = null;
        StateHasChanged();

        try
        {
            var client = HttpClientFactory.CreateClient("WebAPI");
            var response = await client.PostAsJsonAsync("api/Auth/login", loginRequest);

            if (response.IsSuccessStatusCode)
            {
                var jsonResponse = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"API Success Response: {jsonResponse}");
                var loginResult = JsonSerializer.Deserialize<LoginResult>(jsonResponse, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });

                if (loginResult != null && !string.IsNullOrWhiteSpace(loginResult.Username))
                {
                    AuthService.SetUser(loginResult);
                    NavigationManager.NavigateTo(ReturnUrl ?? "/", forceLoad: true);
                }
                else
                {
                    errorMessage = "Login successful, but no username was received from the server.";
                }
            }
            else
            {
                errorMessage = "Invalid email or password. Please try again.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"A critical error occurred: {ex.Message}";
            Console.WriteLine($"CRITICAL ERROR: {ex}");
        }
        finally
        {
            isProcessing = false;
            StateHasChanged();
        }
    }

    private void GoToRegister()
    {
        var uri = string.IsNullOrEmpty(ReturnUrl) ? "/register" : $"/register?returnUrl={Uri.EscapeDataString(ReturnUrl)}";
        NavigationManager.NavigateTo(uri);
    }
}
