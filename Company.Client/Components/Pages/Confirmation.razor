@page "/confirmation/{ProductId:int}"
@layout CheckoutLayout
@rendermode @(new InteractiveServerRenderMode(prerender: false))

@using Company.Client.Models
@inject IHttpClientFactory HttpClientFactory
@inject NavigationManager NavigationManager
@inject OrderStateService OrderState
@inject IJSRuntime JSRuntime // <-- الخطوة 1: أضف هذا السطر لحقن JSRuntime

<PageTitle>Confirm Your Order | EnergyWay</PageTitle>

<div class="confirmation-container">
    <div class="glass-card-opaque">
        <h3 class="mb-4">Confirm Your Order</h3>

        @if (product is not null && OrderState.FinalOrder is not null)
        {
                // ... (كل كود الـ HTML هنا يبقى كما هو بدون تغيير) ...
                <div class="row g-4">
                    <!-- Left Column: Order Details -->
                    <div class="col-lg-7">
                        <h5 class="section-title">Shipping Details</h5>
                        <ul class="list-group confirmation-list">
                            <li><strong>Name:</strong> <span>@OrderState.FinalOrder.FullName</span></li>
                            <li><strong>Email:</strong> <span>@OrderState.FinalOrder.Email</span></li>
                            <li><strong>Phone:</strong> <span>@OrderState.FinalOrder.PhoneNumber</span></li>
                            <li><strong>Address:</strong> <span>@OrderState.FinalOrder.ShippingAddress</span></li>
                        </ul>

                        <h5 class="section-title mt-4">Payment Method</h5>
                        <ul class="list-group confirmation-list">
                            <li><strong>Method:</strong> <span>@OrderState.FinalOrder.PaymentMethod</span></li>
                        </ul>
                    </div>

                    <!-- Right Column: Product Summary -->
                    <div class="col-lg-5">
                        <h5 class="section-title">Order Summary</h5>
                        <div class="summary-card">
                            <div class="text-center mb-3">
                                <img src="@GetImage(product)" class="img-fluid rounded" alt="@product.Name" style="max-height: 150px; object-fit: contain;">
                            </div>
                            <h6 class="fw-bold">@product.Name</h6>
                            <ul class="list-group list-group-flush mt-3">
                                <li class="list-group-item">Price per item<span>$@product.Price.ToString("0.00")</span></li>
                                <li class="list-group-item">Quantity<span>@OrderState.FinalOrder.Quantity</span></li>
                                <li class="list-group-item fs-5 text-primary">
                                    <strong>Total</strong>
                                    <strong>$@TotalCost.ToString("0.00")</strong>
                                </li>
                            </ul>
                        </div>
                    </div>
                </div>

                <hr class="my-4" style="border-color: rgba(255,255,255,0.3);">

                @if (!string.IsNullOrEmpty(errorMessage))
                {
                        <div class="alert alert-danger">@errorMessage</div>
                }

                <button class="w-100 btn btn-success btn-lg" @onclick="SubmitOrder" disabled="@isSubmitting">
                    @if (isSubmitting)
                    {
                            <span class="spinner-border spinner-border-sm" aria-hidden="true"></span>
                            <span role="status"> Submitting Order...</span>
                    }
                    else
                    {
                            <span><i class="bi bi-check-circle-fill"></i> Confirm & Place Order</span>
                    }
                </button>
                <button class="w-100 btn btn-link btn-sm mt-2" @onclick="GoBack">
                    Back to Payment
                </button>
        }
        else
        {
                <div class="alert alert-warning">Order details are missing. Please start over.</div>
                <button class="btn btn-secondary" @onclick='() => NavigationManager.NavigateTo("/")'>Go to Homepage</button>
        }
    </div>
</div>

@code {
    [Parameter]
    public int ProductId { get; set; }

    private Product? product;
    private string? errorMessage;
    private bool isSubmitting = false;
    private string apiBaseUrl = "https://localhost:7185";

    private decimal TotalCost => (product?.Price ?? 0) * (OrderState.FinalOrder?.Quantity ?? 0);

    protected override async Task OnInitializedAsync()
    {
        if (OrderState.FinalOrder is null)
        {
            NavigationManager.NavigateTo($"/checkout/{ProductId}");
            return;
        }

        try
        {
            var client = HttpClientFactory.CreateClient("WebAPI");
            product = await client.GetFromJsonAsync<Product>($"api/products/{ProductId}");
        }
        catch (Exception ex)
        {
            errorMessage = $"Could not load product details: {ex.Message}";
        }
    }

    // --- START: تعديل دالة SubmitOrder ---
    private async Task SubmitOrder()
    {
        if (isSubmitting || OrderState.FinalOrder is null || product is null) return;

        isSubmitting = true;
        errorMessage = null;
        StateHasChanged(); // تحديث الواجهة لإظهار الـ spinner

        try
        {
            var client = HttpClientFactory.CreateClient("WebAPI");

            // هذا هو الـ DTO الذي يتوقعه الـ Controller الخاص بك
            var orderDto = new CreateOrderDto
            {
                CustomerName = OrderState.FinalOrder.FullName,
                CustomerEmail = OrderState.FinalOrder.Email,
                CustomerPhone = OrderState.FinalOrder.PhoneNumber,
                ShippingAddress = OrderState.FinalOrder.ShippingAddress,
                OrderItems = new List<OrderItemDto>
                {
                    new OrderItemDto { ProductId = this.ProductId, Quantity = OrderState.FinalOrder.Quantity }
                }
            };

            var response = await client.PostAsJsonAsync("api/orders", orderDto);

            if (response.IsSuccessStatusCode)
            {
                // تم إنشاء الطلب بنجاح
                OrderState.ClearState(); // تنظيف الحالة

                // الخطوة 2: عرض رسالة نجاح جميلة
                await JSRuntime.InvokeVoidAsync("Swal.fire", new
                {
                    title = "Order Placed!",
                    text = "Your order has been successfully placed.",
                    icon = "success",
                    timer = 2000, // الرسالة ستختفي بعد ثانيتين
                    showConfirmButton = false
                });

                // الانتظار قليلاً حتى يرى المستخدم الرسالة قبل إعادة التوجيه
                await Task.Delay(2000);

                // الخطوة 3: إعادة التوجيه إلى صفحة المنتجات
                NavigationManager.NavigateTo("/products", forceLoad: true);
            }
            else
            {
                // في حالة وجود خطأ من الـ API (مثل عدم كفاية المخزون)
                var errorContent = await response.Content.ReadAsStringAsync();
                errorMessage = $"Failed to place order: {errorContent}";
            }
        }
        catch (Exception ex)
        {
            // في حالة وجود خطأ حرج (مثل عدم الاتصال بالـ API)
            errorMessage = $"A critical error occurred: {ex.Message}";
        }
        finally
        {
            isSubmitting = false;
            StateHasChanged(); // تحديث الواجهة لإخفاء الـ spinner
        }
    }
    // --- END: تعديل دالة SubmitOrder ---

    private void GoBack()
    {
        NavigationManager.NavigateTo($"/payment/{ProductId}");
    }

    private string GetImage(Product p)
    {
        if (!string.IsNullOrWhiteSpace(p.ImagePath))
        {
            if (p.ImagePath.StartsWith("http")) return p.ImagePath;
            return $"{apiBaseUrl}/{p.ImagePath.TrimStart('/')}";
        }
        return $"https://via.placeholder.com/400x300.png?text={Uri.EscapeDataString(p.Name)}";
    }

    // ملاحظة: تأكد من أن هذه الـ DTOs موجودة في مشروع الـ Client
    // إذا لم تكن موجودة، يجب نسخها من مشروع الـ API
    public class CreateOrderDto
    {
        public string CustomerName { get; set; } = "";
        public string CustomerEmail { get; set; } = "";
        public string CustomerPhone { get; set; } = "";
        public string ShippingAddress { get; set; } = "";
        public List<OrderItemDto> OrderItems { get; set; } = new();
    }

    public class OrderItemDto
    {
        public int ProductId { get; set; }
        public int Quantity { get; set; }
    }
}
