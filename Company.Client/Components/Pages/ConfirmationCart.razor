@page "/confirmation-cart"
@layout CheckoutLayout
@rendermode @(new InteractiveServerRenderMode(prerender: false))

@using Company.Client.Models
@using Company.Client.Services
@inject IHttpClientFactory HttpClientFactory
@inject NavigationManager NavigationManager
@inject OrderStateService OrderState
@inject CartService CartService
@inject IJSRuntime JSRuntime

<PageTitle>Confirm Your Order | EnergyWay</PageTitle>

<div class="confirmation-container">
    <div class="glass-card-opaque">
        <h3 class="mb-4">Confirm Your Order</h3>

        @if (shippingInfo is not null && cartItems is not null)
        {
            <div class="row g-4">
                <!-- Left Column: Order Details -->
                <div class="col-lg-7">
                    <h5 class="section-title">Shipping Details</h5>
                    <ul class="list-group confirmation-list">
                        <li><strong>Name:</strong> <span>@shippingInfo.FullName</span></li>
                        <li><strong>Email:</strong> <span>@shippingInfo.Email</span></li>
                        <li><strong>Phone:</strong> <span>@shippingInfo.PhoneNumber</span></li>
                        <li><strong>Address:</strong> <span>@shippingInfo.ShippingAddress</span></li>
                    </ul>

                    <h5 class="section-title mt-4">Payment Method</h5>
                    <ul class="list-group confirmation-list">
                        <li><strong>Method:</strong> <span>Cash on Delivery</span></li>
                    </ul>
                </div>

                <!-- Right Column: Product Summary -->
                <div class="col-lg-5">
                    <h5 class="section-title">Order Summary</h5>
                    <div class="summary-card">
                        <ul class="list-group list-group-flush mt-3">
                            @foreach (var item in cartItems)
                            {
                                <li class="list-group-item">@item.Name (x @item.Quantity)<span>$@((item.Price * item.Quantity).ToString("0.00"))</span></li>
                            }
                            <li class="list-group-item fs-5 text-primary border-top">
                                <strong>Total</strong>
                                <strong>$@TotalCost.ToString("0.00")</strong>
                            </li>
                        </ul>
                    </div>
                </div>
            </div>

            <hr class="my-4" style="border-color: rgba(255,255,255,0.3);">

            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="alert alert-danger">@errorMessage</div>
            }

            <button class="w-100 btn btn-success btn-lg" @onclick="SubmitOrder" disabled="@isSubmitting">
                @if (isSubmitting)
                {
                    <span class="spinner-border spinner-border-sm" aria-hidden="true"></span>
                    <span role="status"> Submitting Order...</span>
                }
                else
                {
                    <span><i class="bi bi-check-circle-fill"></i> Confirm & Place Order</span>
                }
            </button>
            <button class="w-100 btn btn-link btn-sm mt-2" @onclick="GoBack">
                Back to Payment
            </button>
        }
        else
        {
            <div class="alert alert-warning">Order details are missing. Please start over.</div>
            <button class="btn btn-secondary" @onclick='() => NavigationManager.NavigateTo("/cart")'>Go to Cart</button>
        }
    </div>
</div>

@code {
    private ShippingInfoModel? shippingInfo;
    private List<CartItem>? cartItems;
    private string? errorMessage;
    private bool isSubmitting = false;

    private decimal TotalCost => cartItems?.Sum(item => item.Price * item.Quantity) ?? 0;

    protected override void OnInitialized()
    {
        shippingInfo = OrderState.ShippingInfo;
        cartItems = OrderState.CartItems;

        if (shippingInfo is null || cartItems is null || !cartItems.Any())
        {
            NavigationManager.NavigateTo("/cart", forceLoad: true);
        }
    }

    private async Task SubmitOrder()
    {
        if (isSubmitting || shippingInfo is null || cartItems is null) return;

        isSubmitting = true;
        errorMessage = null;
        StateHasChanged();

        try
        {
            // --- THIS IS THE CORRECT LOGIC FOR THE CART ---
            // 1. Create the DTO that the API controller expects.
            var orderDto = new CreateOrderDto
            {
                CustomerName = shippingInfo.FullName,
                CustomerEmail = shippingInfo.Email,
                CustomerPhone = shippingInfo.PhoneNumber,
                ShippingAddress = shippingInfo.ShippingAddress,

                // 2. This is the key difference: Map the LIST of cart items.
                OrderItems = cartItems.Select(item => new OrderItemDto
                {
                    ProductId = item.ProductId,
                    Quantity = item.Quantity
                }).ToList()
            };
            // --- END OF CORRECT LOGIC ---

            var client = HttpClientFactory.CreateClient("WebAPI");
            var response = await client.PostAsJsonAsync("api/orders", orderDto);

            if (response.IsSuccessStatusCode)
            {
                await CartService.ClearCart();
                OrderState.ClearState();

                await JSRuntime.InvokeVoidAsync("Swal.fire", new
                {
                    title = "Order Placed!",
                    text = "Your order has been successfully placed.",
                    icon = "success",
                    timer = 2000,
                    showConfirmButton = false
                });

                await Task.Delay(2000);
                NavigationManager.NavigateTo("/products", forceLoad: true);
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                errorMessage = $"Failed to place order: {errorContent}";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"A critical error occurred: {ex.Message}";
        }
        finally
        {
            isSubmitting = false;
            StateHasChanged();
        }
    }

    private void GoBack()
    {
        NavigationManager.NavigateTo("/payment-cart");
    }

    // --- IMPORTANT NOTE ---
    // These DTO classes must exist in your Client project's "Models" folder.
    // They must match the DTOs used in your API Controller.
    // Based on your previous code, they should look like this.
    // If they don't exist, you need to create them.

    public class CreateOrderDto
    {
        public string CustomerName { get; set; } = "";
        public string CustomerEmail { get; set; } = "";
        public string CustomerPhone { get; set; } = "";
        public string ShippingAddress { get; set; } = "";
        public List<OrderItemDto> OrderItems { get; set; } = new();
    }

    public class OrderItemDto
    {
        public int ProductId { get; set; }
        public int Quantity { get; set; }
    }
}
