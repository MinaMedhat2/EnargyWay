@page "/checkout-cart"
@layout CheckoutLayout
@rendermode @(new InteractiveServerRenderMode(prerender: false))

@using Company.Client.Models
@using Company.Client.Services

@inject NavigationManager NavigationManager
@inject AuthService AuthService
@inject CartService CartService
@inject OrderStateService OrderState

<PageTitle>Checkout | EnergyWay</PageTitle>

<!-- Back Button -->
<div class="container mt-4">
    <button class="btn btn-outline-light" @onclick='() => NavigationManager.NavigateTo("/cart")'>
        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-arrow-left-circle" viewBox="0 0 16 16"><path fill-rule="evenodd" d="M1 8a7 7 0 1 0 14 0A7 7 0 0 0 1 8zm15 0A8 8 0 1 1 0 8a8 8 0 0 1 16 0zm-4.5-.5a.5.5 0 0 1 0 1H5.707l2.147 2.146a.5.5 0 0 1-.708.708l-3-3a.5.5 0 0 1 0-.708l3-3a.5.5 0 1 1 .708.708L5.707 7.5H11.5z" /></svg>
        Back to Cart
    </button>
</div>

@if (cartItems is null && string.IsNullOrEmpty(errorMessage))
{
    <div class="container mt-5 text-center">
        <div class="spinner-border text-light" role="status"><span class="visually-hidden">Loading...</span></div>
        <p class="mt-2 text-light">Loading Your Cart...</p>
    </div>
}
else if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="container mt-5">
        <div class="glass-card text-center">
            <h3 class="text-danger">An Error Occurred</h3>
            <p class="fs-5">@errorMessage</p>
            <button class="btn btn-outline-light mt-3" @onclick='() => NavigationManager.NavigateTo("/")'>Go to Homepage</button>
        </div>
    </div>
}
else
{
    <div class="container mt-5">
        <div class="row g-5">
            <!-- Shipping Information Column -->
            <div class="col-md-7 col-lg-8">
                <div class="glass-card">
                    <h4 class="mb-4">Shipping Information</h4>
                    <EditForm Model="shippingModel" OnValidSubmit="ProceedToPayment" FormName="checkoutCartForm">
                        <DataAnnotationsValidator />
                        <div class="row g-3">
                            <div class="col-12">
                                <label for="fullName" class="form-label">Full Name</label><InputText id="fullName" class="form-control" @bind-Value="shippingModel.FullName" />
                                <ValidationMessage For="@(() => shippingModel.FullName)" />
                            </div>
                            <div class="col-12">
                                <label for="email" class="form-label">Email</label><InputText id="email" class="form-control" @bind-Value="shippingModel.Email" />
                                <ValidationMessage For="@(() => shippingModel.Email)" />
                            </div>
                            <div class="col-12">
                                <label for="phone" class="form-label">Phone Number</label><InputText id="phone" class="form-control" @bind-Value="shippingModel.PhoneNumber" />
                                <ValidationMessage For="@(() => shippingModel.PhoneNumber)" />
                            </div>
                            <div class="col-12">
                                <label for="address" class="form-label">Shipping Address</label><InputTextArea id="address" class="form-control" @bind-Value="shippingModel.ShippingAddress" rows="3" />
                                <ValidationMessage For="@(() => shippingModel.ShippingAddress)" />
                            </div>
                        </div>
                        <hr class="my-4" style="border-color: rgba(255,255,255,0.3);" />
                        <button class="w-100 btn btn-primary btn-lg" type="submit">Continue to Payment</button>
                    </EditForm>
                </div>
            </div>

            <!-- Order Summary Column -->
            <div class="col-md-5 col-lg-4">
                <div class="glass-card">
                    <h4 class="mb-4">Order Summary</h4>
                    <ul class="list-group list-group-flush">
                        @foreach (var item in cartItems)
                        {
                            <li class="list-group-item">
                                <div>@item.Name (x @item.Quantity)</div>
                                <span>$@((item.Price * item.Quantity).ToString("0.00"))</span>
                            </li>
                        }
                        <li class="list-group-item fs-5 border-top pt-3">
                            <strong>Total</strong>
                            <strong>$@TotalCost.ToString("0.00")</strong>
                        </li>
                    </ul>
                </div>
            </div>
        </div>
    </div>
}


@code {
    private List<CartItem>? cartItems;
    private ShippingInfoModel shippingModel = new();
    private string? errorMessage;

    private decimal TotalCost => cartItems?.Sum(item => item.Price * item.Quantity) ?? 0;

    protected override async Task OnInitializedAsync()
    {
        // إذا كنا نعود من صفحة الدفع، يجب أن نحمل البيانات المحفوظة
        if (OrderState.ShippingInfo != null)
        {
            shippingModel = OrderState.ShippingInfo;
        }

        try
        {
            // --- START: MODIFICATION ---
            // We will also load the cart items from the state if they exist,
            // otherwise we fetch them from the service. This preserves data when navigating back.
            cartItems = OrderState.CartItems ?? await CartService.GetCartItems();
            // --- END: MODIFICATION ---

            if (cartItems == null || !cartItems.Any())
            {
                errorMessage = "Your cart is empty. Please add items before checking out.";
                return;
            }

            // ملء بيانات المستخدم تلقائياً إذا كان مسجلاً ولم يتم ملؤها من قبل
            if (AuthService.IsLoggedIn && AuthService.CurrentUser != null && OrderState.ShippingInfo is null)
            {
                shippingModel.FullName = AuthService.CurrentUser.Username;
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred while loading your cart: {ex.Message}";
        }
    }

    private void ProceedToPayment()
    {
        // --- START: THIS IS THE CORRECT LOGIC ---
        // Mimicking the "Buy Now" flow:
        // 1. Save the shipping info to the state service.
        OrderState.SetShippingInfo(shippingModel);

        // 2. Save the list of cart items to the state service (this is needed for the next steps).
        OrderState.SetCartItems(cartItems);

        // 3. Navigate to the dedicated payment page for the cart.
        NavigationManager.NavigateTo("/payment-cart");
        // --- END: THIS IS THE CORRECT LOGIC ---
    }
}
