@inherits LayoutComponentBase
@inject NavigationManager NavigationManager
@inject AuthService AuthService
@inject CartService cartService
@implements IDisposable

@* We only render the header if the current page is NOT an authentication page *@
@if (!IsAuthPage)
{
    <div class="elegant-header">
        <div class="header-content">
            <div class="header-left">
                <a href="/" class="company-logo-link">
                    <img src="/images/logo4.jpg" alt="PLS Company Logo" class="company-logo-image" />
                </a>
            </div>

            <div class="header-center">
                <div class="search-wrapper">
                    <input type="text" class="search-input" placeholder="Search products..." @bind="searchQuery" @onkeyup="HandleSearchInput" />
                    <button class="search-button-icon" @onclick="PerformSearch">
                        <svg viewBox="0 0 24 24"><path d="M15.5 14h-.79l-.28-.27A6.471 6.471 0 0 0 16 9.5 6.5 6.5 0 1 0 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"></path></svg>
                    </button>
                </div>
            </div>

            <div class="header-right">
                <!-- Sort Dropdown -->
                <div class="dropdown sort-menu">
                    <button class="btn-sort">
                        <svg width="18" height="18" viewBox="0 0 16 16" fill="currentColor"><path d="M1.5 1.5A.5.5 0 0 1 2 1h12a.5.5 0 0 1 0 1H2a.5.5 0 0 1-.5-.5zM8 4a.5.5 0 0 1 .5.5v5.793l2.146-2.147a.5.5 0 0 1 .708.708l-3 3a.5.5 0 0 1-.708 0l-3-3a.5.5 0 0 1 .708-.708L7.5 10.293V4.5A.5.5 0 0 1 8 4z"></path></svg>
                        <span>Sort</span>
                    </button>
                    <div class="dropdown-content">
                        <a href="#" @onclick='() => ApplySort("name")' @onclick:preventDefault>Name (A → Z)</a>
                        <a href="#" @onclick='() => ApplySort("price-asc")' @onclick:preventDefault>Price (Low → High)</a>
                        <a href="#" @onclick='() => ApplySort("price-desc")' @onclick:preventDefault>Price (High → Low)</a>
                        <a href="#" @onclick='() => ApplySort("stock")' @onclick:preventDefault>Stock Quantity</a>
                    </div>
                </div>

                <!-- Cart Icon (Visible for both logged in users and visitors) -->
                <a href="/cart" class="btn-action cart-icon-wrapper">
                    <svg viewBox="0 0 24 24" fill="currentColor"><path d="M17 18c-1.11 0-2 .89-2 2s.89 2 2 2 2-.89 2-2-.89-2-2-2zM7 18c-1.11 0-2 .89-2 2s.89 2 2 2 2-.89 2-2-.89-2-2-2zM1 2v2h2l3.6 7.59-1.36 2.45c-.15.28-.24.61-.24.96 0 1.1.9 2 2 2h12v-2H7.42c-.14 0-.25-.11-.25-.25l.03-.12.9-1.63h7.45c.75 0 1.41-.41 1.75-1.03l3.58-6.49c.08-.14.12-.31.12-.48 0-.55-.45-1-1-1H5.21l-.94-2H1zm16 0h-2v2h2V2z"></path></svg>
                    @if (cartItemCount > 0)
                    {
                        <span class="cart-badge">@cartItemCount</span>
                    }
                </a>

                <!-- User Menu -->
                @if (AuthService.IsLoggedIn)
                {
                    <div class="dropdown user-menu">
                        <button class="btn-action btn-user">
                            <span>@AuthService.CurrentUser?.Username</span>
                            <svg class="chevron-down" viewBox="0 0 20 20" fill="currentColor"><path fill-rule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" clip-rule="evenodd" /></svg>
                        </button>
                        <div class="dropdown-content">
                            <a href="/account" class="dropdown-item">
                                <svg viewBox="0 0 20 20" fill="currentColor"><path d="M10 9a3 3 0 100-6 3 3 0 000 6zm-7 9a7 7 0 1114 0H3z"></path></svg>
                                <span>My Account</span>
                            </a>
                            <a href="/my-orders" class="dropdown-item">
                                <svg viewBox="0 0 20 20" fill="currentColor"><path d="M3 1a1 1 0 000 2h1.22l.305 1.222a.997.997 0 00.01.042l1.358 5.43-.893.892C3.74 11.846 4.632 14 6.414 14H15a1 1 0 000-2H6.414l1-1H14a1 1 0 00.894-.553l3-6A1 1 0 0017 3H4.79l-.38-1.521A1 1 0 003 1z"></path></svg>
                                <span>My Orders</span>
                            </a>
                            <a href="/cart" class="dropdown-item">
                                <svg viewBox="0 0 20 20" fill="currentColor"><path d="M3 1a1 1 0 000 2h1.22l.305 1.222a.997.997 0 00.01.042l1.358 5.43-.893.892C3.74 11.846 4.632 14 6.414 14H15a1 1 0 000-2H6.414l1-1H14a1 1 0 00.894-.553l3-6A1 1 0 0017 3H4.79l-.38-1.521A1 1 0 003 1z"></path></svg>
                                <span>My Cart</span>
                            </a>
                            @* --- START: THIS IS THE ONLY MODIFICATION --- *@
                            <a href="/about-us" class="dropdown-item">
                                @* --- END: THIS IS THE ONLY MODIFICATION --- *@
                                <svg viewBox="0 0 20 20" fill="currentColor"><path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z" clip-rule="evenodd"></path></svg>
                                <span>About</span>
                            </a>
                            <div class="dropdown-divider"></div>
                            <a href="#" @onclick="Logout" @onclick:preventDefault class="dropdown-item logout-link">
                                <svg viewBox="0 0 20 20" fill="currentColor"><path fill-rule="evenodd" d="M3 3a1 1 0 00-1 1v12a1 1 0 102 0V4a1 1 0 00-1-1zm10.293 9.293a1 1 0 001.414 1.414l3-3a1 1 0 000-1.414l-3-3a1 1 0 10-1.414 1.414L14.586 9H7a1 1 0 100 2h7.586l-1.293 1.293z" clip-rule="evenodd"></path></svg>
                                <span>Logout</span>
                            </a>
                        </div>
                    </div>
                }
                else
                {
                    <a href="/login" class="btn-action btn-login">
                        <svg viewBox="0 0 24 24"><path d="M11 7L9.6 8.4l2.6 2.6H2v2h10.2l-2.6 2.6L11 17l5-5-5-5zm9 12h-8v-2h8v2zm0-4h-8v-2h8v2zm0-4h-8v-2h8v2z"></path></svg>
                        <span>Login</span>
                    </a>
                }
            </div>
        </div>
    </div>
}

<main>
    @Body
</main>

<style>
    /* All your existing styles are here */
    :root {
        --header-bg: #f7f9fc;
        --primary-brand-color: #3b82f6;
        --text-color-dark: #1f2937;
        --text-color-light: #6b7280;
        --border-color: #e5e7eb;
        --search-bg: #ffffff;
        --button-hover-bg: #eff6ff;
    }

    .elegant-header {
        background-color: rgba(247, 249, 252, 0.8);
        border-bottom: 1px solid var(--border-color);
        padding: 0.75rem 2rem;
        position: sticky;
        top: 0;
        z-index: 1020;
        backdrop-filter: blur(8px);
    }

    .header-content {
        display: flex;
        align-items: center;
        justify-content: space-between;
        width: 100%;
        max-width: 1400px;
        margin: 0 auto;
    }

    .header-left {
        flex: 1 0 0;
    }

    .header-center {
        flex: 2 0 0;
        display: flex;
        justify-content: center;
    }

    .header-right {
        flex: 1 0 0;
        display: flex;
        justify-content: flex-end;
        align-items: center;
        gap: 0.75rem;
    }

    .company-logo-link {
        display: inline-block;
        line-height: 0;
    }

    .company-logo-image {
        height: 40px;
        width: auto;
        transition: transform 0.2s ease;
    }

        .company-logo-image:hover {
            transform: scale(1.05);
        }

    .search-wrapper {
        display: flex;
        align-items: center;
        background-color: var(--search-bg);
        border: 1px solid var(--border-color);
        border-radius: 25px;
        width: 100%;
        max-width: 450px;
        transition: box-shadow 0.2s;
    }

        .search-wrapper:focus-within {
            box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.2);
            border-color: var(--primary-brand-color);
        }

    .search-input {
        border: none;
        outline: none;
        background: none;
        padding: 0.5rem 1rem;
        font-size: 0.95rem;
        width: 100%;
        color: var(--text-color-dark);
    }

    .search-button-icon {
        display: flex;
        align-items: center;
        justify-content: center;
        background: none;
        border: none;
        padding: 0.5rem;
        cursor: pointer;
        color: var(--text-color-light);
    }

        .search-button-icon:hover {
            color: var(--primary-brand-color);
        }

        .search-button-icon svg {
            width: 22px;
            height: 22px;
            fill: currentColor;
        }

    .btn-action {
        display: inline-flex;
        align-items: center;
        gap: 0.5rem;
        padding: 0.6rem 1.2rem;
        border-radius: 20px;
        font-weight: 500;
        text-decoration: none;
        transition: background-color 0.2s, color 0.2s;
        border: none;
        cursor: pointer;
        white-space: nowrap;
    }

        .btn-action svg {
            width: 20px;
            height: 20px;
            fill: currentColor;
        }

    .btn-login {
        background-color: var(--button-hover-bg);
        color: var(--primary-brand-color);
    }

        .btn-login:hover {
            background-color: var(--primary-brand-color);
            color: white;
        }

    .dropdown {
        position: relative;
    }

    .dropdown-content {
        display: none;
        position: absolute;
        top: calc(100% + 0.5rem);
        right: 0;
        background-color: white;
        border-radius: 12px;
        box-shadow: 0 10px 15px -3px rgba(0,0,0,0.1), 0 4px 6px -2px rgba(0,0,0,0.05);
        border: 1px solid var(--border-color);
        min-width: 200px;
        z-index: 1000;
        padding: 0.5rem;
    }

    .dropdown:hover .dropdown-content {
        display: block;
    }

    .dropdown-content a {
        display: block;
        padding: 0.6rem 0.75rem;
        text-decoration: none;
        color: var(--text-color-dark);
        font-size: 0.9rem;
        border-radius: 6px;
    }

        .dropdown-content a:hover {
            background-color: var(--button-hover-bg);
        }

    .dropdown-divider {
        height: 1px;
        background-color: var(--border-color);
        margin: 0.5rem;
    }

    .dropdown-item {
        display: flex;
        align-items: center;
        gap: 0.75rem;
    }

        .dropdown-item svg {
            width: 18px;
            height: 18px;
            color: var(--text-color-light);
        }

    .logout-link {
        color: #ef4444 !important;
    }

        .logout-link:hover {
            background-color: #fee2e2 !important;
        }

        .logout-link svg {
            color: #ef4444 !important;
        }

    .btn-sort {
        display: inline-flex;
        align-items: center;
        gap: 0.5rem;
        background-color: transparent;
        color: var(--text-color-light);
        border: none;
        padding: 0.6rem 1.2rem;
        border-radius: 20px;
        font-weight: 500;
        cursor: pointer;
        transition: all 0.2s;
    }

        .btn-sort:hover {
            background-color: var(--button-hover-bg);
            color: var(--text-color-dark);
        }

    .btn-user {
        background-color: var(--button-hover-bg);
        color: var(--primary-brand-color);
        display: inline-flex;
        align-items: center;
        gap: 0.5rem;
        padding: 0.6rem 1.2rem;
        border-radius: 20px;
        font-weight: 500;
        text-decoration: none;
        border: none;
        cursor: pointer;
        white-space: nowrap;
    }

        .btn-user:hover {
            background-color: var(--primary-brand-color);
            color: white;
        }

    .chevron-down {
        width: 20px;
        height: 20px;
        transition: transform 0.2s;
    }

    .dropdown:hover .chevron-down {
        transform: rotate(180deg);
    }

    .cart-icon-wrapper {
        position: relative;
        color: var(--text-color-light);
        padding: 0.6rem;
    }

        .cart-icon-wrapper:hover {
            background-color: var(--button-hover-bg);
            color: var(--text-color-dark);
        }

    .cart-badge {
        position: absolute;
        top: 0;
        right: 0;
        background-color: #ef4444;
        color: white;
        border-radius: 50%;
        width: 20px;
        height: 20px;
        font-size: 12px;
        font-weight: 500;
        display: flex;
        align-items: center;
        justify-content: center;
        transform: translate(25%, -25%);
    }
</style>

@code {
    private bool IsAuthPage =>
        NavigationManager.Uri.Contains("/login", StringComparison.OrdinalIgnoreCase) ||
        NavigationManager.Uri.Contains("/register", StringComparison.OrdinalIgnoreCase);

    private string searchQuery = string.Empty;
    private void HandleSearchInput(KeyboardEventArgs e) { if (e.Key == "Enter") PerformSearch(); }
    private void PerformSearch()
    {
        if (!string.IsNullOrWhiteSpace(searchQuery))
        {
            NavigationManager.NavigateTo($"/products?q={Uri.EscapeDataString(searchQuery)}");
        }
        else
        {
            NavigationManager.NavigateTo("/products");
        }
    }

    private void ApplySort(string sortOrder)
    {
        var uri = new Uri(NavigationManager.Uri);
        var query = System.Web.HttpUtility.ParseQueryString(uri.Query);
        var currentSearch = query["q"];

        if (!string.IsNullOrWhiteSpace(currentSearch))
        {
            NavigationManager.NavigateTo($"/products?q={Uri.EscapeDataString(currentSearch)}&sort={sortOrder}");
        }
        else
        {
            NavigationManager.NavigateTo($"/products?sort={sortOrder}");
        }
    }

    private int cartItemCount = 0;

    private async Task UpdateCartCount()
    {
        try
        {
            cartItemCount = await cartService.GetCartItemCount();
            await InvokeAsync(StateHasChanged);
        }
        catch (Exception)
        {
            // Ignore errors during prerendering or if service is not available
        }
    }

    protected override async Task OnInitializedAsync()
    {
        // Subscribe to events
        AuthService.OnChange += StateHasChanged;
        NavigationManager.LocationChanged += OnLocationChanged;
        cartService.CartChanged += OnCartChanged;

        // Initial cart count load
        await UpdateCartCount();
    }

    private async Task OnCartChanged()
    {
        await UpdateCartCount();
    }

    private void Logout()
    {
        AuthService.Logout();
        NavigationManager.NavigateTo("/");
    }



    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        // Unsubscribe from events to prevent memory leaks
        AuthService.OnChange -= StateHasChanged;
        NavigationManager.LocationChanged -= OnLocationChanged;
        cartService.CartChanged -= OnCartChanged;
    }
}
