@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider

<nav class="navbar navbar-expand-lg navbar-light bg-white shadow-sm fixed-top user-navbar-sm">
    <div class="container">
        <a class="navbar-brand fw-bold" href="/user-dashboard">
            <i class="fas fa-store me-2 text-primary"></i>
            Company Store
        </a>
        <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#userNavbar" aria-controls="userNavbar" aria-expanded="false" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>
        <div class="collapse navbar-collapse" id="userNavbar">
            <ul class="navbar-nav mx-auto mb-2 mb-lg-0">
                <li class="nav-item">
                    <NavLink class="nav-link" href="/products">
                        <i class="fas fa-box-open me-1"></i> Products
                    </NavLink>
                </li>
                <li class="nav-item">
                    <NavLink class="nav-link" href="/cart">
                        <i class="fas fa-shopping-cart me-1"></i> My Cart
                    </NavLink>
                </li>
            </ul>
            <div class="d-flex align-items-center">
                @if (userIsAuthenticated)
                {
                    <span class="navbar-text me-3">
                        Welcome, <strong>@userName</strong>
                    </span>
                    <button class="btn btn-outline-danger btn-sm" @onclick="HandleLogout">
                        <i class="fas fa-sign-out-alt me-1"></i> Logout
                    </button>
                }
            </div>
        </div>
    </div>
</nav>

@code {
    private string? userName;
    private bool userIsAuthenticated = false;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        if (user.Identity is { IsAuthenticated: true })
        {
            userIsAuthenticated = true;
            userName = user.Identity.Name;
        }
    }

    private void HandleLogout()
    {
        NavigationManager.NavigateTo("/logout", forceLoad: true);
    }
}
