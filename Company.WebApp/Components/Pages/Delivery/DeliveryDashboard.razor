@page "/delivery-dashboard"
@attribute [Authorize(Roles = "DeliveryPerson")]
@inject HttpClient Http

<div class="dashboard-wrapper">
    <div class="dashboard-content">

        <div class="page-title-container">
            <h3>My Delivery Assignments</h3>
            <p>Review your assigned orders and mark them as delivered upon completion.</p>
        </div>

        @if (assignments == null)
        {
            <div class="status-container">
                <p><em><span class="spinner-border spinner-border-sm"></span> Loading assignments...</em></p>
            </div>
        }
        else if (!assignments.Any())
        {
            <div class="status-container no-assignments">
                <span class="oi oi-check-circle"></span>
                <h4>All Clear!</h4>
                <p>You have no pending deliveries. Great job!</p>
            </div>
        }
        else
        {
            <div class="assignments-grid">
                @foreach (var assignment in assignments)
                {
                    <div class="assignment-card">
                        <div class="card-header">
                            <span>Order #@assignment.OriginalOrderId</span>
                            <span class="total-amount">@assignment.TotalAmount.ToString("C")</span>
                        </div>
                        <div class="card-body">
                            <div class="info-item">
                                <span class="oi oi-person"></span>
                                <div>
                                    <strong>Customer</strong>
                                    <span>@assignment.CustomerName</span>
                                </div>
                            </div>
                            <div class="info-item">
                                <span class="oi oi-phone"></span>
                                <div>
                                    <strong>Phone</strong>
                                    <span>@assignment.CustomerPhone</span>
                                </div>
                            </div>
                            <div class="info-item">
                                <span class="oi oi-map-marker"></span>
                                <div>
                                    <strong>Address</strong>
                                    <span>@assignment.ShippingAddress</span>
                                </div>
                            </div>
                        </div>
                        <div class="card-footer">
                            <button class="btn-deliver" @onclick="() => MarkAsDelivered(assignment.AssignmentId)" disabled="@isSaving">
                                @if (isSaving && selectedAssignmentId == assignment.AssignmentId)
                                {
                                    <span class="spinner-border spinner-border-sm"></span>
                                }
                                else
                                {
                                    <span class="oi oi-check"></span>
                                }
                                <span>Mark as Delivered</span>
                            </button>
                        </div>
                    </div>
                }
            </div>
        }
    </div>
</div>

<style>
    /* --- بداية التعديل المهم --- */
    .dashboard-wrapper {
        position: absolute; /* تغيير إلى absolute */
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        padding: 2rem;
        padding-top: 80px; /* مسافة من الـ Navbar */
        background-image: url('/Slide4.jpg');
        background-size: cover;
        background-position: center;
        background-attachment: fixed;
        overflow-y: auto; /* السماح بالتمرير العمودي إذا زاد المحتوى */
    }
        /* --- نهاية التعديل المهم --- */

        /* طبقة لونية فوق الخلفية */
        .dashboard-wrapper::after {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background-color: rgba(10, 25, 47, 0.85);
            z-index: 0;
        }

    .dashboard-content {
        position: relative;
        z-index: 1;
        width: 100%;
    }

    /* --- عنوان الصفحة --- */
    .page-title-container {
        text-align: center;
        margin-bottom: 2.5rem;
        color: #ffffff;
    }

        .page-title-container h3 {
            font-size: 2.5rem;
            font-weight: 700;
            letter-spacing: 1px;
            text-shadow: 0 2px 6px rgba(0,0,0,0.7);
        }

        .page-title-container p {
            font-size: 1.1rem;
            color: #e0e0e0;
            max-width: 600px;
            margin: 0.5rem auto 0;
            text-shadow: 0 1px 3px rgba(0,0,0,0.5);
        }

    /* --- رسائل الحالة --- */
    .status-container {
        background-color: rgba(255, 255, 255, 0.08);
        border: 1px solid rgba(255, 255, 255, 0.15);
        border-radius: 12px;
        padding: 2rem;
        text-align: center;
        color: #f5f5f5;
        max-width: 600px;
        margin: 2rem auto;
    }

    .no-assignments .oi {
        font-size: 2.5rem;
        color: #a5d6a7;
    }

    .no-assignments h4 {
        margin-top: 1rem;
        font-size: 1.5rem;
        font-weight: 600;
        color: #fff;
    }

    /* --- شبكة البطاقات --- */
    .assignments-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(360px, 1fr));
        gap: 1.5rem;
    }

    /* --- تصميم البطاقة (Glassmorphism) --- */
    .assignment-card {
        background: rgba(13, 37, 63, 0.8);
        border: 1px solid rgba(129, 199, 237, 0.25);
        border-radius: 12px;
        box-shadow: 0 8px 32px 0 rgba(0, 0, 0, 0.37);
        backdrop-filter: blur(12px);
        color: #f5f5f5;
        display: flex;
        flex-direction: column;
        transition: all 0.3s ease;
    }

        .assignment-card:hover {
            border-color: rgba(129, 199, 237, 0.6);
            transform: translateY(-5px);
        }

        .assignment-card .card-header {
            padding: 1rem 1.5rem;
            border-bottom: 1px solid rgba(129, 199, 237, 0.25);
            font-weight: 600;
            display: flex;
            justify-content: space-between;
            align-items: center;
            color: #ffffff;
        }

    .total-amount {
        background-color: rgba(255, 255, 255, 0.15);
        padding: 0.3rem 0.8rem;
        border-radius: 50px;
        font-size: 0.9rem;
        color: #fff;
    }

    .assignment-card .card-body {
        padding: 1.5rem;
        display: flex;
        flex-direction: column;
        gap: 1.25rem;
    }

    .info-item {
        display: flex;
        align-items: center;
        gap: 1rem;
    }

        .info-item .oi {
            color: #90caf9;
            width: 20px;
        }

        .info-item div {
            display: flex;
            flex-direction: column;
        }

        .info-item strong {
            font-size: 0.8rem;
            color: #b0bec5;
            text-transform: uppercase;
            margin-bottom: 2px;
        }

        .info-item span {
            font-size: 1rem;
            color: #ffffff;
            font-weight: 500;
        }

    .assignment-card .card-footer {
        padding: 1rem;
        margin-top: auto;
    }

    .btn-deliver {
        width: 100%;
        background: linear-gradient(45deg, #ffca28, #ffb300);
        color: #000000;
        border: none;
        padding: 0.8rem;
        border-radius: 8px;
        font-size: 1rem;
        font-weight: 700;
        cursor: pointer;
        transition: all 0.2s ease;
        display: flex;
        justify-content: center;
        align-items: center;
        gap: 0.5rem;
    }

        .btn-deliver:hover {
            box-shadow: 0 4px 25px rgba(255, 202, 40, 0.5);
            transform: translateY(-2px);
        }

        .btn-deliver:disabled {
            background: #78909c;
            color: #cfd8dc;
            cursor: not-allowed;
        }

</style>

@code {
    private List<DeliveryAssignment>? assignments;
    private bool isSaving = false;
    private int selectedAssignmentId = 0;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            assignments = await Http.GetFromJsonAsync<List<DeliveryAssignment>>("api/orders/assignments");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching assignments: {ex.Message}");
            assignments = new List<DeliveryAssignment>();
        }
    }

    private async Task MarkAsDelivered(int assignmentId)
    {
        if (isSaving) return;
        isSaving = true;
        selectedAssignmentId = assignmentId;
        StateHasChanged();
        try
        {
            var response = await Http.PutAsync($"api/orders/assignments/{assignmentId}/deliver", null);
            if (response.IsSuccessStatusCode)
            {
                var assignmentToRemove = assignments?.FirstOrDefault(a => a.AssignmentId == assignmentId);
                if (assignmentToRemove != null)
                {
                    assignments.Remove(assignmentToRemove);
                }
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"Failed to mark as delivered: {error}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error in MarkAsDelivered: {ex.Message}");
        }
        finally
        {
            isSaving = false;
            selectedAssignmentId = 0;
            StateHasChanged();
        }
    }

    public class DeliveryAssignment
    {
        public int AssignmentId { get; set; }
        public int OriginalOrderId { get; set; }
        public string? CustomerName { get; set; }
        public string? CustomerPhone { get; set; }
        public string? ShippingAddress { get; set; }
        public decimal TotalAmount { get; set; }
    }
}
