@page "/admin/customers"
@attribute [Authorize(Roles = "Admin")]
@layout AdminLayout
@rendermode InteractiveServer
@inject HttpClient Http
@inject IJSRuntime JSRuntime

<PageTitle>Manage Customers</PageTitle>

<div class="d-flex justify-content-between align-items-center mb-4">
    <div class="d-flex align-items-center">
        <i class="fas fa-user-friends fa-2x text-warning me-3"></i>
        <div>
            <h1 class="mb-0">Customer Management</h1>
            <p class="text-muted mb-0">View and manage customer accounts.</p>
        </div>
    </div>
</div>

@if (customers == null)
{
    <div class="text-center p-5"><div class="spinner-border text-warning" role="status"></div><p class="mt-2"><em>Loading customers...</em></p></div>
}
else if (!customers.Any())
{
    <div class="text-center p-5 border rounded bg-light"><h4>No Customers Found</h4><p>There are currently no customer accounts in the database.</p></div>
}
else
{
    <div class="table-responsive shadow-sm rounded">
        <table class="table table-striped table-hover align-middle">
            <thead class="table-dark">
                <tr>
                    <th>Username</th>
                    <th>Email</th>
                    <th>Date Joined</th>
                    <th class="text-center">Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var customer in customers)
                {
                    <tr>
                        <td>@customer.Username</td>
                        <td>@customer.Email</td>
                        <td>@customer.CreatedAt.ToShortDateString()</td>
                        <td class="text-center">
                            <button class="btn btn-sm btn-outline-danger" title="Delete Account" @onclick="() => HandleDelete(customer.UserID)">
                                <i class="fas fa-trash-alt"></i>
                            </button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}

@code {
    private List<CustomerDto>? customers;

    protected override async Task OnInitializedAsync()
    {
        await LoadCustomers();
    }

    private async Task LoadCustomers()
    {
        try
        {
            customers = await Http.GetFromJsonAsync<List<CustomerDto>>("api/customers");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading customers: {ex.Message}");
        }
    }

    private async Task HandleDelete(int customerId)
    {
        bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to permanently delete this customer account?");
        if (confirmed)
        {
            try
            {
                var response = await Http.DeleteAsync($"api/customers/{customerId}");
                if (response.IsSuccessStatusCode)
                {
                    await LoadCustomers(); // Refresh the list
                }
                else
                {
                    Console.WriteLine("Error deleting customer: " + await response.Content.ReadAsStringAsync());
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error: {ex.Message}");
            }
        }
    }

    // DTO for Customer data
    public class CustomerDto
    {
        public int UserID { get; set; }
        public string Username { get; set; } = "";
        public string Email { get; set; } = "";
        public DateTime CreatedAt { get; set; }
    }
}
