@page "/admin/employees"
@attribute [Authorize(Roles = "Admin")]
@layout AdminLayout
@rendermode InteractiveServer
@inject HttpClient Http
@inject IJSRuntime JSRuntime

<PageTitle>Manage Employees</PageTitle>

<div class="d-flex justify-content-between align-items-center mb-4">
    <div class="d-flex align-items-center">
        <i class="fas fa-users-cog fa-2x text-info me-3"></i>
        <div>
            <h1 class="mb-0">Employee Management</h1>
            <p class="text-muted mb-0">View, add, edit, and delete employee records.</p>
        </div>
    </div>
    <button class="btn btn-info btn-lg" @onclick="ShowAddModal">
        <i class="fas fa-plus me-2"></i> Add New Employee
    </button>
</div>

@if (employees == null)
{
    <div class="text-center p-5"><div class="spinner-border text-info" role="status"></div><p class="mt-2"><em>Loading employees...</em></p></div>
}
else if (!employees.Any())
{
    <div class="text-center p-5 border rounded bg-light"><h4>No Employees Found</h4><p>Click 'Add New Employee' to get started.</p></div>
}
else
{
    <div class="table-responsive shadow-sm rounded">
        <table class="table table-striped table-hover align-middle">
            <thead class="table-dark">
                <tr>
                    <th>Name</th>
                    <th>Job Title</th>
                    <th>Salary</th>
                    <th class="text-center">Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var employee in employees)
                {
                    <tr>
                        <td>@employee.Name</td>
                        <td>@employee.JobTitle</td>
                        <td>@employee.Salary.ToString("C")</td>
                        <td class="text-center">
                            <button class="btn btn-sm btn-outline-primary me-1" title="Edit" @onclick="() => ShowEditModal(employee)">
                                <i class="fas fa-pencil-alt"></i>
                            </button>
                            <button class="btn btn-sm btn-outline-danger" title="Delete" @onclick="() => HandleDelete(employee.EmployeeID)">
                                <i class="fas fa-trash-alt"></i>
                            </button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}

<!-- Add/Edit Modal -->
@if (isModalVisible)
{
    <div class="modal fade show" style="display:block" tabindex="-1">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content shadow-lg">
                <div class="modal-header bg-info text-white">
                    <h5 class="modal-title"><i class="fas fa-user-plus me-2"></i>@modalTitle</h5>
                    <button type="button" class="btn-close btn-close-white" @onclick="CloseModal"></button>
                </div>
                <div class="modal-body">
                    <EditForm Model="currentEmployee" OnValidSubmit="HandleSave">
                        <DataAnnotationsValidator />
                        <div class="mb-3">
                            <label class="form-label"><strong>Full Name</strong></label>
                            <InputText class="form-control" @bind-Value="currentEmployee.Name" />
                            <ValidationMessage For="@(() => currentEmployee.Name)" />
                        </div>
                        <div class="mb-3">
                            <label class="form-label"><strong>Job Title</strong></label>
                            <InputText class="form-control" @bind-Value="currentEmployee.JobTitle" />
                            <ValidationMessage For="@(() => currentEmployee.JobTitle)" />
                        </div>
                        <div class="mb-3">
                            <label class="form-label"><strong>Salary</strong></label>
                            <InputNumber class="form-control" @bind-Value="currentEmployee.Salary" />
                            <ValidationMessage For="@(() => currentEmployee.Salary)" />
                        </div>
                        @if (!string.IsNullOrEmpty(modalMessage))
                        {
                            <div class="alert alert-danger mt-3">@modalMessage</div>
                        }
                        <hr />
                        <div class="modal-footer border-0">
                            <button type="button" class="btn btn-secondary" @onclick="CloseModal">Cancel</button>
                            <button type="submit" class="btn btn-info"><i class="fas fa-save me-2"></i>Save Changes</button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

@code {
    private List<EmployeeDto>? employees;
    private bool isModalVisible = false;
    private bool isAdding = false;
    private string modalTitle = "";
    private string modalMessage = "";
    private EmployeeDto currentEmployee = new();

    protected override async Task OnInitializedAsync() => await LoadEmployees();

    private async Task LoadEmployees()
    {
        try { employees = await Http.GetFromJsonAsync<List<EmployeeDto>>("api/employees"); }
        catch (Exception ex) { Console.WriteLine($"Error loading employees: {ex.Message}"); }
    }

    private void ShowAddModal()
    {
        isAdding = true;
        modalTitle = "Add New Employee";
        currentEmployee = new();
        isModalVisible = true;
    }

    private void ShowEditModal(EmployeeDto employeeToEdit)
    {
        isAdding = false;
        modalTitle = "Edit Employee";
        currentEmployee = new EmployeeDto
        {
            EmployeeID = employeeToEdit.EmployeeID,
            Name = employeeToEdit.Name,
            JobTitle = employeeToEdit.JobTitle,
            Salary = employeeToEdit.Salary
        };
        isModalVisible = true;
    }

    private void CloseModal()
    {
        isModalVisible = false;
        currentEmployee = new();
        modalMessage = "";
    }

    private async Task HandleSave()
    {
        if (isAdding) await HandleAdd();
        else await HandleUpdate();
    }

    private async Task HandleAdd()
    {
        try
        {
            var response = await Http.PostAsJsonAsync("api/employees", currentEmployee);
            if (response.IsSuccessStatusCode) { CloseModal(); await LoadEmployees(); }
            else { modalMessage = "Failed to add employee: " + await response.Content.ReadAsStringAsync(); }
        }
        catch (Exception ex) { modalMessage = $"Error: {ex.Message}"; }
    }

    private async Task HandleUpdate()
    {
        try
        {
            var response = await Http.PutAsJsonAsync($"api/employees/{currentEmployee.EmployeeID}", currentEmployee);
            if (response.IsSuccessStatusCode) { CloseModal(); await LoadEmployees(); }
            else { modalMessage = "Failed to update employee: " + await response.Content.ReadAsStringAsync(); }
        }
        catch (Exception ex) { modalMessage = $"Error: {ex.Message}"; }
    }

    private async Task HandleDelete(int employeeId)
    {
        bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this employee?");
        if (confirmed)
        {
            try
            {
                var response = await Http.DeleteAsync($"api/employees/{employeeId}");
                if (response.IsSuccessStatusCode) await LoadEmployees();
                else Console.WriteLine("Error deleting employee: " + await response.Content.ReadAsStringAsync());
            }
            catch (Exception ex) { Console.WriteLine($"Error: {ex.Message}"); }
        }
    }

    // DTO for Employee data
    public class EmployeeDto
    {
        public int EmployeeID { get; set; }
        public string Name { get; set; } = "";
        public string JobTitle { get; set; } = "";
        public decimal Salary { get; set; }
    }
}
