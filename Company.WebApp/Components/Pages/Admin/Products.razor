@page "/admin/products"
@attribute [Authorize(Roles = "Admin")]
@layout AdminLayout
@rendermode InteractiveServer
@inject HttpClient Http
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

<PageTitle>Manage Products</PageTitle>

<div class="d-flex justify-content-between align-items-center mb-4">
    <div class="d-flex align-items-center">
        <i class="fas fa-box-open fa-2x text-primary me-3"></i>
        <div>
            <h1 class="mb-0">Product Management</h1>
            <p class="text-muted mb-0">View, add, edit, and delete petroleum products.</p>
        </div>
    </div>
    <button class="btn btn-success btn-lg" @onclick="ShowAddModal">
        <i class="fas fa-plus me-2"></i> Add New Product
    </button>
</div>

@if (products == null)
{
    <div class="text-center p-5"><div class="spinner-border text-primary" role="status"><span class="visually-hidden">Loading...</span></div><p class="mt-2"><em>Loading products...</em></p></div>
}
else if (!products.Any())
{
    <div class="text-center p-5 border rounded bg-light"><h4>No Products Found</h4><p>Click 'Add New Product' to get started.</p></div>
}
else
{
    <div class="table-responsive shadow-sm rounded">
        <table class="table table-striped table-hover align-middle">
            <thead class="table-dark">
                <tr>
                    <th style="width: 10%;">Image</th>
                    <th style="width: 15%;">Name</th>
                    <th style="width: 35%;">Description</th>
                    <th style="width: 10%;">Price</th>
                    <th style="width: 10%;">Stock</th>
                    <th style="width: 20%;" class="text-center">Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var product in products)
                {
                    <tr>
                        <td><img src="@($"https://localhost:7185{product.ImagePath}")" alt="@product.Name" class="img-thumbnail" style="width: 80px; height: 80px; object-fit: cover;" /></td>
                        <td>@product.Name</td>
                        <td>@product.Description</td>
                        <td>@product.Price.ToString("C")</td>
                        <td>@product.StockQuantity</td>
                        <td class="text-center">
                            <button class="btn btn-sm btn-success me-1" title="Sell" @onclick="() => ShowSellModal(product)" disabled="@(product.StockQuantity <= 0)">
                                <i class="fas fa-dollar-sign"></i>
                            </button>
                            <button class="btn btn-sm btn-outline-primary me-1" title="Edit" @onclick="() => ShowEditModal(product)">
                                <i class="fas fa-pencil-alt"></i>
                            </button>
                            <button class="btn btn-sm btn-outline-danger" title="Delete" @onclick="() => HandleDelete(product.ProductID)">
                                <i class="fas fa-trash-alt"></i>
                            </button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}

<!-- Add/Edit Modal -->
@if (isModalVisible)
{
    <div class="modal fade show" style="display:block" tabindex="-1">
        <div class="modal-dialog modal-lg modal-dialog-centered">
            <div class="modal-content shadow-lg">
                <div class="modal-header bg-primary text-white">
                    <h5 class="modal-title"><i class="fas fa-plus me-2"></i>@modalTitle</h5>
                    <button type="button" class="btn-close btn-close-white" @onclick="CloseModal"></button>
                </div>
                <div class="modal-body">
                    <EditForm Model="currentProduct" OnValidSubmit="HandleSave">
                        <DataAnnotationsValidator />
                        <div class="row">
                            <div class="col-md-8">
                                <div class="mb-3"><label class="form-label"><strong>Product Name</strong></label><InputText class="form-control" @bind-Value="currentProduct.Name" /></div>
                                <div class="mb-3"><label class="form-label"><strong>Description</strong></label><InputTextArea class="form-control" @bind-Value="currentProduct.Description" rows="4" /></div>
                                <div class="row">
                                    <div class="col-md-6 mb-3"><label class="form-label"><strong>Price</strong></label><InputNumber class="form-control" @bind-Value="currentProduct.Price" /></div>
                                    <div class="col-md-6 mb-3"><label class="form-label"><strong>Stock Quantity</strong></label><InputNumber class="form-control" @bind-Value="currentProduct.StockQuantity" /></div>
                                </div>
                            </div>
                            <div class="col-md-4">
                                @if (isAdding)
                                {
                                    <div class="mb-3"><label class="form-label"><strong>Product Image</strong></label><InputFile class="form-control" OnChange="HandleFileSelected" /></div>
                                }
                                else
                                {
                                    <label class="form-label"><strong>Current Image</strong></label>
                                    <img src="@($"https://localhost:7185{currentProduct.ImagePath}")" class="img-fluid rounded" />
                                }
                            </div>
                        </div>
                        @if (!string.IsNullOrEmpty(modalMessage))
                        {
                            <div class="alert alert-danger mt-3">@modalMessage</div>
                        }
                        <hr />
                        <div class="modal-footer border-0">
                            <button type="button" class="btn btn-secondary" @onclick="CloseModal">Cancel</button>
                            <button type="submit" class="btn btn-primary"><i class="fas fa-save me-2"></i>Save Changes</button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

<!-- Sell Modal -->
@if (showSellModal)
{
    <div class="modal fade show" style="display:block" tabindex="-1">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header bg-success text-white">
                    <h5 class="modal-title">Sell Product: @currentProduct.Name</h5>
                    <button type="button" class="btn-close btn-close-white" @onclick="CloseSellModal"></button>
                </div>
                <div class="modal-body">
                    <p>Available Stock: <strong>@currentProduct.StockQuantity</strong></p>
                    <EditForm Model="newSale" OnValidSubmit="HandleSaleSubmit">
                        <div class="mb-3">
                            <label class="form-label"><strong>Quantity to Sell</strong></label>
                            <InputNumber class="form-control" @bind-Value="newSale.Quantity" />
                        </div>
                        @if (!string.IsNullOrEmpty(modalMessage))
                        {
                            <div class="alert alert-danger">@modalMessage</div>
                        }
                        <div class="modal-footer border-0">
                            <button type="button" class="btn btn-secondary" @onclick="CloseSellModal">Cancel</button>
                            <button type="submit" class="btn btn-success"><i class="fas fa-check-circle me-2"></i>Confirm Sale</button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}


@code {
    private List<ProductDto>? products;
    private bool isModalVisible = false;
    private bool isAdding = false;
    private string modalTitle = "";
    private string modalMessage = "";
    private ProductDto currentProduct = new();
    private IBrowserFile? selectedFile;

    private bool showSellModal = false;
    private SaleCreateDto newSale = new();

    protected override async Task OnInitializedAsync() => await LoadProducts();

    private async Task LoadProducts()
    {
        try { products = await Http.GetFromJsonAsync<List<ProductDto>>("api/products"); }
        catch (Exception ex) { Console.WriteLine($"Error loading products: {ex.Message}"); }
    }

    private void ShowAddModal()
    {
        isAdding = true;
        modalTitle = "Add New Product";
        currentProduct = new();
        isModalVisible = true;
    }

    private void ShowEditModal(ProductDto productToEdit)
    {
        isAdding = false;
        modalTitle = "Edit Product";
        currentProduct = new ProductDto
        {
            ProductID = productToEdit.ProductID,
            Name = productToEdit.Name,
            Description = productToEdit.Description,
            Price = productToEdit.Price,
            ImagePath = productToEdit.ImagePath,
            StockQuantity = productToEdit.StockQuantity
        };
        isModalVisible = true;
    }

    private void CloseModal()
    {
        isModalVisible = false;
        currentProduct = new();
        selectedFile = null;
        modalMessage = "";
    }

    private void HandleFileSelected(InputFileChangeEventArgs e) => selectedFile = e.File;

    private async Task HandleSave()
    {
        if (isAdding) await HandleAddProduct();
        else await HandleUpdateProduct();
    }

    private async Task HandleAddProduct()
    {
        if (selectedFile == null) { modalMessage = "Please select an image."; return; }
        try
        {
            using var content = new MultipartFormDataContent();
            content.Add(new StringContent(currentProduct.Name), "Name");
            content.Add(new StringContent(currentProduct.Description ?? ""), "Description");
            content.Add(new StringContent(currentProduct.Price.ToString()), "Price");
            content.Add(new StringContent(currentProduct.StockQuantity.ToString()), "StockQuantity");
            using var fileStream = selectedFile.OpenReadStream(1024 * 1024 * 5);
            using var fileContent = new StreamContent(fileStream);
            fileContent.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue(selectedFile.ContentType);
            content.Add(fileContent, "Image", selectedFile.Name);
            var response = await Http.PostAsync("api/products", content);
            if (response.IsSuccessStatusCode) { CloseModal(); await LoadProducts(); }
            else { modalMessage = "Failed to add product: " + await response.Content.ReadAsStringAsync(); }
        }
        catch (Exception ex) { modalMessage = $"Error: {ex.Message}"; }
    }

    private async Task HandleUpdateProduct()
    {
        try
        {
            var response = await Http.PutAsJsonAsync($"api/products/{currentProduct.ProductID}", currentProduct);
            if (response.IsSuccessStatusCode) { CloseModal(); await LoadProducts(); }
            else { modalMessage = "Failed to update product: " + await response.Content.ReadAsStringAsync(); }
        }
        catch (Exception ex) { modalMessage = $"Error: {ex.Message}"; }
    }

    private async Task HandleDelete(int productId)
    {
        bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this product?");
        if (confirmed)
        {
            try
            {
                var response = await Http.DeleteAsync($"api/products/{productId}");
                if (response.IsSuccessStatusCode) await LoadProducts();
                else Console.WriteLine("Error deleting product: " + await response.Content.ReadAsStringAsync());
            }
            catch (Exception ex) { Console.WriteLine($"Error: {ex.Message}"); }
        }
    }

    private void ShowSellModal(ProductDto product)
    {
        newSale = new SaleCreateDto { ProductId = product.ProductID, Quantity = 1 };
        currentProduct = product;
        showSellModal = true;
    }

    private void CloseSellModal()
    {
        showSellModal = false;
        modalMessage = "";
    }

    private async Task HandleSaleSubmit()
    {
        modalMessage = "";

        if (newSale.Quantity <= 0)
        {
            modalMessage = "Quantity must be greater than zero.";
            return;
        }
        if (newSale.Quantity > currentProduct.StockQuantity)
        {
            modalMessage = "Not enough stock available.";
            return;
        }

        try
        {
            var response = await Http.PostAsJsonAsync("api/sales", newSale);

            if (response.IsSuccessStatusCode)
            {
                CloseSellModal();
                await LoadProducts();
                await JSRuntime.InvokeVoidAsync("alert", "Sale recorded successfully!");
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                modalMessage = $"Failed to record sale: {errorContent}";
            }
        }
        catch (Exception ex)
        {
            modalMessage = $"An unexpected error occurred: {ex.Message}";
        }
    }

    public class ProductDto
    {
        public int ProductID { get; set; }
        public string Name { get; set; } = "";
        public string? Description { get; set; }
        public decimal Price { get; set; }
        public string? ImagePath { get; set; }
        public int StockQuantity { get; set; }
    }

    public class SaleCreateDto
    {
        public int ProductId { get; set; }
        public int Quantity { get; set; }
    }
}
